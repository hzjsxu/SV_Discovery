#!/bin/bash

#Reciprocal Overlap
ro1="0.90"  #Deletion
ro2="0.70"  #Duplication

dellypath=""
pindelpath=""
grompath=""
lumpypath=""
metapath=""
mindpath=""
samplelist=""
outpath=""
svtype=""
helpmode=0


while getopts d:g:l:p:m:n:s:o:t:h option
do
  case "${option}"
  in
    d) dellypath=${OPTARG};;
    g) grompath=${OPTARG};;
    l) lumpypath=${OPTARG};;
    p) pindelpath=${OPTARG};;
    m) metapath=${OPTARG};;
    n) mindpath=${OPTARG};;
    s) samplelist=${OPTARG};;
    o) outpath="${OPTARG}";;
    t) svtype=${OPTARG};;
    h) helpmode=1;;
  esac
done

function printhelp {
	echo -e "\nThis script merges per sample the predictions from mutiple callers. It accepts the file/s generated by parse_output.sh. Delly, GROM, Lumpy and Pindel results are required for DEL, DUP and INV while MetaSV and MindTheGap for INS."
        echo -e "  -d\tDelly file/s"
        echo -e "  -g\tGROM file/s"
        echo -e "  -l\tLumpy file/s"
        echo -e "  -p\tPindel file/s"
	echo -e "  -m\tMetaSV directory (INS)"
    	echo -e "  -n\tMindTheGap directory (INS)"
        echo -e "  -s\tSample list"
        echo -e "  -o\tOutput directory"
        echo -e "  -t\tSV Type (DEL/DUP/INV)"
        echo -e "  -h\tHelp\n"
}

if [[ ( $svtype == "DEL" || $svtype == "DUP" || $svtype == "INV" ) && ( $dellypath == "" || $grompath == "" || $lumpypath == "" || $pindelpath == "" ) ]]
then
	printhelp
	exit 1
elif [[ $samplelist == "" || $helpmode == 1 || $svtype == "" || $outpath == "" ]]
then
	printhelp
	exit 1
elif [[ $svtype == "INS" && ( $metapath == "" || $mindpath == "") ]]
then
	printhelp
	exit 1
fi

if [ $svtype == "DEL" ]
then
    svtype_full=deletion
elif [ $svtype == "INS" ]
then
   svtype=insertion
elif [ $svtype == "INV" ]
then
   svtype=inversion
elif [ $svtype == "DUP" ]
then
   svtype_full=duplication
else
   echo "ERROR: Incorrect SV type."
   exit 1
fi

#ORDER of breakpoint precision: Pindel,Delly,GROM,Lumpy

if [ $svtype == "INS" ]
then
for samname in $(less $samplelist);
do
  file=${samname}.${svtype_full}.txt
  echo $samname

  awk -F"[\t;]" -v OFS="\t" '{print $1,$2,$3,$4,$5,$6}' $metapath/$file $mindpath/$file | sort -k1,1 -k2,2n -k5,5n | awk -v OFS="\t" '{if($6!="")print $1,$2,$3,$4";"$5";"$6; else print $1,$2,$3,$4";"$5;}' > $dirpath/${sample}.${svtype_full}.txt

done

else

for samname in $(less $samplelist);
do

dellyfile="$dellypath/${samname}.${svtype_full}.txt"
pindelfile="$pindelpath/${samname}.${svtype_full}.txt"
gromfile="$grompath/${samname}.${svtype_full}.txt"
lumpyfile="$lumpypath/${samname}.${svtype_full}.txt"

#SORTING breakpoints
if [ ! -f $dellyfile ]; then 
	touch $dellyfile
else
	sort -k1,1 -k2,2n $dellyfile -o $dellyfile
fi

if [ ! -f $pindelfile ]; then
	touch $pindelfile
else
    	sort -k1,1 -k2,2n $pindelfile -o $pindelfile
fi

if [ ! -f $gromfile ]; then
	touch $gromfile
else
  	sort -k1,1 -k2,2n $gromfile -o $gromfile
fi

if [ ! -f $lumpyfile ]; then
	touch $lumpyfile
else
        sort -k1,1 -k2,2n $lumpyfile -o $lumpyfile
fi

if [ -f $outpath/${samname}_out000.txt ]; then
        rm $outpath/${samname}_out000.txt  #clear existing file
fi

touch $outpath/${samname}_out000.txt

if [[ $svtype == "DEL" || $svtype == "DUP" ]]
then   
   #MERGING callers
   if [ -f $pindelfile ] && [ -f $dellyfile ] && [ -f $gromfile ] && [ -f $lumpyfile ];
   then
        #Include all pindel breakpoints
        awk -F"[;\t]" -v OFS='\t' '$5>=10 && $5<500000 {print}' $pindelfile >> $outpath/${samname}_out000.txt
       
        #Extracting breakpoints not intersecting with Pindel's
        bedtools intersect -nonamecheck -sorted -v -f $ro1 -r  -a $dellyfile -b $pindelfile \
           | awk -F"[;\t]" -v OFS='\t' '$5>=10 && $5<500000 {print}' > $outpath/${samname}_delly_000.txt

        bedtools intersect -nonamecheck -sorted -v -f $ro1 -r  -a $gromfile -b $pindelfile \
           | awk -F"[;\t]" -v OFS='\t' '$5>=10 && $5<500000 {print}' > $outpath/${samname}_grom_000.txt

        bedtools intersect -nonamecheck -sorted -v -f $ro2 -r  -a $lumpyfile -b $pindelfile \
           | awk -F"[;\t]" -v OFS='\t' '$5>=10 && $5<500000 {print}' > $outpath/${samname}_lumpy_000.txt

        #Get additional breakpoints
   	bedtools intersect -nonamecheck -sorted -u -f $ro1 -r -a $outpath/${samname}_delly_000.txt -b $outpath/${samname}_grom_000.txt \
           >> $outpath/${samname}_out000.txt
        
        bedtools intersect -nonamecheck -sorted -u -f $ro2 -r -a $outpath/${samname}_delly_000.txt -b $outpath/${samname}_lumpy_000.txt \
           >> $outpath/${samname}_out000.txt

        bedtools intersect -nonamecheck -sorted -v -f $ro1 -r -a $outpath/${samname}_grom_000.txt -b $outpath/${samname}_delly_000.txt \
           > $outpath/${samname}_tmp1_000.txt #uniq breakpoints from GROM

        bedtools intersect -nonamecheck -sorted -v -f $ro2 -r -a $outpath/${samname}_lumpy_000.txt -b $outpath/${samname}_delly_000.txt \
           > $outpath/${samname}_tmp2_000.txt #uniq breakpoints from Lumpy

        bedtools intersect -nonamecheck -sorted -u -f $ro2 -r -a $outpath/${samname}_tmp1_000.txt -b $outpath/${samname}_tmp2_000.txt \
           >> $outpath/${samname}_out000.txt

   	sort -k1,1 -k2,2n -k3,3n $outpath/${samname}_out000.txt | uniq - >  $outpath/${samname}.${svtype_full}.txt
   	rm  $outpath/${samname}_*_000.txt
   	rm  $outpath/${samname}_out000.txt
   else
	echo "Missing File: ${samname}"
   fi

elif [ $svtype == "INV" ]
then
   #MERGING callers
   if [ -f $pindelfile ] && [ -f $dellyfile ] && [ -f $gromfile ] && [ -f $lumpyfile ];
   then
        #Include all pindel and lumpy breakpoints
        awk -F"[;\t]" -v OFS='\t' '$5>=10 && $5<500000 {print}' $pindelfile >> $outpath/${samname}_out000.txt

        bedtools intersect -nonamecheck -sorted -v -f $ro1 -r  -a $lumpyfile -b $pindelfile \
           | awk -F"[;\t]" -v OFS='\t' '$5>=10 && $5<500000 {print}' >> $outpath/${samname}_out000.txt

        #Extracting breakpoints not intersecting with Pindel & Lumpy's
        #WARNING: Do not include -sorted since the list from Pindel and Lumpy is not sorted
        bedtools intersect -nonamecheck -v -f $ro1 -r  -a $dellyfile -b $outpath/${samname}_out000.txt \
           | awk -F"[;\t]" -v OFS='\t' '$5>=10 && $5<500000 {print}' > $outpath/${samname}_delly_000.txt

        bedtools intersect -nonamecheck -v -f $ro1 -r  -a $gromfile -b $outpath/${samname}_out000.txt \
           | awk -F"[;\t]" -v OFS='\t' '$5>=10 && $5<500000 {print}' > $outpath/${samname}_grom_000.txt

        #Get additional breakpoints
        bedtools intersect -nonamecheck -sorted -u -f $ro1 -r -a $outpath/${samname}_delly_000.txt -b $outpath/${samname}_grom_000.txt \
           >> $outpath/${samname}_out000.txt

        sort -k1,1 -k2,2n -k3,3n $outpath/${samname}_out000.txt | uniq - >  $outpath/${samname}.${svtype_full}.txt
        rm  $outpath/${samname}_*_000.txt
        rm  $outpath/${samname}_out000.txt
   else
        echo "Missing File: ${samname}"
   fi

fi

echo $samname

done
fi
